import streamlit as st
import time
import requests

st.set_page_config(
    page_title=" Search chat",
    page_icon="üîç",
)

URL = "http://backend:80/question/"
QUESTION = "question"


# Streamed response emulator
def response(request):
    if request == "" or request== " ":
        yield "–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"

    data = {
        QUESTION: request,
    }

    response = requests.post(URL, json=data)
    if response.status_code == 200:
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ –æ—Ç–≤–µ—Ç
        data = response.json()
        for word in data.split():
            yield word + " "
            time.sleep(0.05) 
    
    else:
    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —Ä–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        yield "Request failed with status {response.status_code}"
   


st.title("üîç Search chat")

# Initialize chat history
if "messages" not in st.session_state:
    st.session_state.messages = []

# Display chat messages from history on app rerun
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Accept user input
if prompt := st.chat_input("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å?"):
    # Add user message to chat history
    st.session_state.messages.append({"role": "user", "content": prompt})
    # Display user message in chat message container
    with st.chat_message("user"):
        st.markdown(prompt)

    # Display assistant response in chat message container
    with st.chat_message("assistant"):
        response = st.write_stream(response(prompt))
    # Add assistant response to chat history
    st.session_state.messages.append({"role": "assistant", "content": response})